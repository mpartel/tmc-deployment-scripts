#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/tmc-deploy/tmc_deploy.rb'

require './site.rb'

WORK_DIR = File.realpath(File.dirname(__FILE__)) + '/work'
STAGING_DIR = WORK_DIR + '/staging'
PLUGIN_REPO = 'git://github.com/testmycode/tmc-netbeans.git'

FileUtils.rm_rf(WORK_DIR)
FileUtils.mkdir_p(WORK_DIR)
FileUtils.rm_rf(STAGING_DIR)
FileUtils.mkdir_p(STAGING_DIR)

def standard_deployment(deployment_name, version, tailoring_file, options = {})
  options = {
    :tailoring_file => "../tailoring/#{tailoring_file}",
    :version => version,
    :netbeans_dir => NB_DIR_FOR_PLUGIN,
    :nbplatform_name => 'nb802',
    :zip => true,
    :installers => true,
    :pack200 => PACK200,
    :update_site => true,
    :dest_name => deployment_name
  }.merge(options)

  TmcDeploy.deployment(deployment_name, :work_dir => WORK_DIR) do |name|
    repo = git_clone(name, PLUGIN_REPO)
    repo.fetch('origin').reset_hard(version).clean

    build_tmc_nb_plugin(name, options)

    stage_nb_plugin(name, STAGING_DIR) if options[:update_site]
    stage_zip(name, STAGING_DIR) if options[:zip]
    stage_installers(name, STAGING_DIR) if options[:installers]

    if options[:update_site]
      FileUtils.mkdir_p(UPDATE_SITE + '/' + options[:dest_name])
      move_dir_over(STAGING_DIR + '/updates', UPDATE_SITE + '/' + options[:dest_name])
    end

    if options[:zip] || options[:installers]
      FileUtils.mkdir_p(INSTALLER_SITE + '/' + options[:dest_name])
      move_dir_over(STAGING_DIR + '/installers', INSTALLER_SITE + '/' + options[:dest_name])
    end
  end
end

def deploy(deployment_name, version, tailoring_file)
  standard_deployment(deployment_name + '_plugin', version, tailoring_file,
    :netbeans_dir => NB_DIR_FOR_PLUGIN,
    :zip => false,
    :installers => false,
    :update_site => true,
    :dest_name => deployment_name
  )
  standard_deployment(deployment_name + '_tmcbeans', version, tailoring_file,
    :netbeans_dir => NB_DIR_FOR_TMCNETBEANS,
    :installers => true,
    :zip => true,
    :update_site => false,
    :dest_name => deployment_name
  )
end

deploy('tmc-netbeans', '0.9.1', 'GenericTailoring.java')
deploy('tmc-netbeans_hy', '0.8.18', 'HyTailoring.java')
deploy('tmc-netbeans_hy_tktl', '0.9.2', 'HyTktlTailoring.java')  # not so temporary workaround for UH IT problems. to be removed at some point. will have to set up a 301 for the update site
deploy('tmc-netbeans_hy_staging', 'backport', 'HyTailoring.java')
deploy('tmc-netbeans_org_mooc', '1.1.6', 'OrgMoocTailoring.java')
deploy('tmc-netbeans_test', '1.1.7', 'TestTailoring.java')
deploy('tmc-netbeans_mooc', '0.8.18', 'MoocTailoring.java')
deploy('tmc-netbeans_pk', '0.9.1', 'PkTailoring.java')


def author_plugin_deployment(deployment_name, version, update_site_baseurl)
  TmcDeploy.deployment(deployment_name, :work_dir => WORK_DIR) do |name|
    repo = git_clone(name, 'git://github.com/testmycode/tmc-netbeans-author.git')
    repo.fetch('origin').reset_hard(version).clean

    File.open(name + '/update_site.properties', 'wb') do |f|
      f.write("updates.base.url=" + update_site_baseurl)
    end

    build_tmc_nb_plugin(name,
      :version => version,
      :netbeans_dir => NB_DIR_FOR_PLUGIN,
      :nbplatform_name => 'nb81',
      :is_application => false,
      :plugin_update_site => true
    )

    mkdir_p(STAGING_DIR + '/updates')
    mv(name + '/build/fi-helsinki-cs-tmc-author.nbm', STAGING_DIR + '/updates/')
    mv(name + '/build/updates.xml', STAGING_DIR + '/updates/')
    FileUtils.mkdir_p(UPDATE_SITE + '/' + name)
    move_dir_over(STAGING_DIR + '/updates', UPDATE_SITE + '/' + name)
  end
end

author_plugin_deployment(
  'tmc-netbeans-author',
  '0.1.3',
  'http://update.testmycode.net/tmc-netbeans-author'
)


TmcDeploy.main(ARGV)
